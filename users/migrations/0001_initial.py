# Generated by Django 3.1 on 2020-12-27 00:02

import core.managers
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("CO", "컨텐츠 개발"),
                            ("DE", "디자인"),
                            ("MN", "경영지원"),
                            ("LG", "법무"),
                            ("TN", "기술개발"),
                            ("MK", "마케팅"),
                        ],
                        max_length=30,
                        unique=True,
                        verbose_name="소속 부서",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=30, unique=True, verbose_name="소속 팀"),
                ),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="users.department",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("first_name", models.CharField(max_length=10, verbose_name="이름")),
                ("last_name", models.CharField(max_length=10, verbose_name="성")),
                ("code", models.CharField(max_length=10, verbose_name="직원 코드")),
                (
                    "rank",
                    models.IntegerField(
                        choices=[(1, "사원"), (2, "대리"), (3, "과장"), (4, "부장"), (5, "이사")],
                        default=1,
                        verbose_name="직급",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        choices=[
                            (1, "평사원"),
                            (2, "타스크장"),
                            (3, "팀장"),
                            (4, "실장"),
                            (5, "사업부장"),
                            (6, "본부장"),
                            (7, "부사장"),
                            (8, "사장"),
                        ],
                        default=1,
                        verbose_name="직책",
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(default=False, verbose_name="이메일 인증 여부"),
                ),
                ("approved", models.BooleanField(default=False, verbose_name="가입 승인")),
                (
                    "department",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="users.department",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="users.team",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "사원",
                "verbose_name_plural": "사원",
                "ordering": ("-date_joined",),
            },
            managers=[("objects", core.managers.CustomUserManager()),],
        ),
        migrations.AddConstraint(
            model_name="team",
            constraint=models.CheckConstraint(
                check=models.Q(
                    name__in=[
                        "COBA",
                        "COLO",
                        "COMT",
                        "COPH",
                        "COCH",
                        "COBS",
                        "COGS",
                        "DEH",
                        "DE1",
                        "DE2",
                        "DE3",
                        "MNH",
                        "MNG",
                        "MNA",
                        "MNR",
                        "LGH",
                        "TNH",
                        "MKH",
                    ]
                ),
                name="name_in_choices",
            ),
        ),
    ]
